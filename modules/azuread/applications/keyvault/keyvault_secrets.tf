#
# The client-id, client-secret and tenant-id are stored into the keyvault to support password rotation
#
# If the following struture is set in the config section of the keyvault, the secret can be stored in a keyvault generated by a different landing zone

#   keyvaults  = {
#     secrets = {
#       remote_tfstate = {
#         tfstate_key = "foundations" (define the state your calling landing zone has permission to read)
#         lz_key      = "launchpad"
#         output_key  = "keyvaults"
#       }
#       secret_prefix         = "aadapp-caf-launchpad-github-terraformdev-github-integration-landingzones"
#     }
#   }
#

data "terraform_remote_state" "keyvaults" {
  for_each = try(var.settings.keyvault, {})

  backend = "azurerm"
  config = {
    storage_account_name = var.tfstates[each.value.remote_tfstate.tfstate_key].storage_account_name
    container_name       = var.tfstates[each.value.remote_tfstate.tfstate_key].container_name
    resource_group_name  = var.tfstates[each.value.remote_tfstate.tfstate_key].resource_group_name
    key                  = var.tfstates[each.value.remote_tfstate.tfstate_key].key
    use_msi              = var.use_msi
    subscription_id      = var.use_msi ? var.tfstates[each.value.remote_tfstate.tfstate_key].subscription_id : null
    tenant_id            = var.use_msi ? var.tfstates[each.value.remote_tfstate.tfstate_key].tenant_id : null
  }
}


resource "azurerm_key_vault_secret" "client_id" {
  name         = format("%s-client-id", var.settings.secret_prefix)
  value        = var.application_id
  key_vault_id = try(var.settings.remote_tfstate.tfstate_key, null) == null ? var.keyvault_id : data.terraform_remote_state.keyvaults["remote_tfstate"].outputs[var.settings.remote_tfstate.output_key][var.settings.remote_tfstate.lz_key][var.settings.keyvault_key].id
  # key_vault_id = try(data.terraform_remote_state.keyvaults["remote_tfstate"].outputs[var.settings.remote_tfstate.output_key][var.settings.remote_tfstate.lz_key][var.settings.keyvault_key].id, var.keyvault_id)

  lifecycle {
    ignore_changes = [
      value
    ]
  }

}

resource "azurerm_key_vault_secret" "client_secret" {
  name            = format("%s-client-secret", var.settings.secret_prefix)
  value           = var.client_secret
  key_vault_id    = try(data.terraform_remote_state.keyvaults["remote_tfstate"].outputs[var.settings.remote_tfstate.output_key][var.settings.remote_tfstate.lz_key][var.settings.keyvault_key].id, var.keyvault_id)
  expiration_date = timeadd(timestamp(), format("%sh", try(var.password_expire_in_days, 180) * 24))

  lifecycle {
    ignore_changes = [
      expiration_date, value
    ]
  }
}

resource "azurerm_key_vault_secret" "tenant_id" {
  name         = format("%s-tenant-id", var.settings.secret_prefix)
  value        = var.tenant_id
  key_vault_id = try(data.terraform_remote_state.keyvaults["remote_tfstate"].outputs[var.settings.remote_tfstate.output_key][var.settings.remote_tfstate.lz_key][var.settings.keyvault_key].id, var.keyvault_id)
}